//
//  PineTar-Prefix.pch
//  PineTar
//
//  Created by Stepan Koposov on 3/2/15.
//  Copyright (c) 2015 Stepan Koposov. All rights reserved.
//

#import <Availability.h>

#ifndef __IPHONE_5_0
#warning "This project uses features only available in iOS SDK 5.0 and later."
#endif

#ifdef __OBJC__
#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>
#import <QuartzCore/QuartzCore.h>
#import <CoreData/CoreData.h>
/* STORYBOARD IDENTIFIER */
//-------------------------------------------------------------------------------------
#define MAIN_STORYBOARD_IPHONE @"Main"
#define MAIN_STORYBOARD_IPAD @"Main-iPad"

#define CLASS_IDENTIFIER(className) [[className class] description]
#define VIEW_CONTROLLER(className) [className viewControllerFromStoryboardName:MAIN_STORYBOARD_IPHONE withIdentifier:CLASS_IDENTIFIER(className)]
//-------------------------------------------------------------------------------------

/* DEBUG LOGS */
//-------------------------------------------------------------------------------------
//#ifdef DEBUG  // RLO - Uncommented NSLog in order to show the DLog print stmts in the console
//// But this resulted in  many errors.  So I made my own RLog print stmt and added it where I wanted more visibility
//#   define DLog(fmt, ...) //NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
//#   define RLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
//#else
//#   define RLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
//#   define DLog(...)
//#endif

// ALog always displays output regardless of the DEBUG setting
#define DLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define DDLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);

/* FOLDER NAMES */
//-------------------------------------------------------------------------------------
#define FOLDER_MY_INTERIORS @""


#define jsonValue(jsonRepresentation) ((id)jsonRepresentation != [NSNull null]) ? jsonRepresentation : nil
#define LOCALIZED_STRING(stringKey) NSLocalizedString(stringKey, nil)

/* BLOCK MAIN QUEUE*/
#define BLOCK_ASYNC_RUN_MAIN_QUEUE(methods) dispatch_async(dispatch_get_main_queue(), ^{methods})

/* SHARED INSTANCE BLOCK */
//-------------------------------------------------------------------------------------
#define BLOCK_SAFE_RUN(block, ...) block ? block(__VA_ARGS__) : nil

#define DEFINE_SHARED_INSTANCE_USING_BLOCK(block) \
static dispatch_once_t pred = 0; \
__strong static id _sharedObject = nil; \
dispatch_once(&pred, ^{ \
_sharedObject = block(); \
}); \
return _sharedObject;
//-------------------------------------------------------------------------------------

// check device orientation
#define dDeviceOrientation [[UIDevice currentDevice] orientation]
#define Is_Portrait  UIDeviceOrientationIsPortrait(dDeviceOrientation)
#define Is_Landscape UIDeviceOrientationIsLandscape(dDeviceOrientation)
#define Is_FaceUp    dDeviceOrientation == UIDeviceOrientationFaceUp   ? YES : NO
#define Is_FaceDown  dDeviceOrientation == UIDeviceOrientationFaceDown ? YES : NO

#define IS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
#define IS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
#define IS_IPHONE_5 (IS_IPHONE && [[UIScreen mainScreen] bounds].size.height == 568.0f) || (IS_IPHONE && [[UIScreen mainScreen] bounds].size.width == 568.0f)
#define IS_IPHONE_4 (IS_IPHONE && [[UIScreen mainScreen] bounds].size.height == 480.0f) || (IS_IPHONE && [[UIScreen mainScreen] bounds].size.width == 480.0f)
#define IS_RETINA ([[UIScreen mainScreen] respondsToSelector:@selector(displayLinkWithTarget:selector:)] && ([UIScreen mainScreen].scale == 2.0))
#define IS_IPHONE_6_PLUS ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone && MAX([UIScreen mainScreen].bounds.size.height,[UIScreen mainScreen].bounds.size.width) == 736)

#define IS_IPHONE_6 ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone && MAX([UIScreen mainScreen].bounds.size.height,[UIScreen mainScreen].bounds.size.width) == 667)

#define ASSET_BY_SCREEN_HEIGHT(regular, longScreen) (([[UIScreen mainScreen] bounds].size.height <= 480.0) ? regular : longScreen)

//-------------------------------------------------------------------------------------------------
#define SYSTEM_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)
//    #define IS_IOS7 SYSTEM_VERSION_EQUAL_TO(@"7.0")
#define IS_IOS7 (floor(NSFoundationVersionNumber) > NSFoundationVersionNumber_iOS_6_1)
#define IS_IOS8 (floor(NSFoundationVersionNumber) > NSFoundationVersionNumber_iOS_7_1)

#endif
